零、安装CentOS 7的硬盘分区（使用GPT分区表）
1.biosboot	标准分区		2MB				文件系统BIOS Boot
2./		LVM		10GB（修改“固定大小 30GB“）	文件系统xfs
3./home		LVM		5GB				文件系统xfs
4.swap		LVM		1GB				文件系统swap
5./boot		标准分区		1GB				文件系统xfs 	
一、安装依赖软件包
1.yum install gtk2 gtk2-devel
2.yum install libXt libXt-devel
3.yum install libXpm libXpm-devel
4.yum install SDL SDL-devel
5.yum install libXrandr-devel.x86_64
6.yum install xorg-x11-server-devel
7.yum install gcc
8.yum install gcc-c++
二、下载bochs-2.6.8并解压
1.wget https://sourceforge.net/projects/bochs/files/bochs/2.6.8/bochs-2.6.8.tar.gz
2.mv bochs-2.6.8.tar.gz /home/george/下载/
3.tar -zxvf bochs-2.6.8.tar.gz  -C /usr/local
三、基于源码编译bochs-2.6.8
1.cd /usr/local/bochs-2.6.8
2.通过./configure建立Makefile文件：./configure --with-x11 --with-wx --enable-debugger --enable-disasm --enable-all-optimizations --enable-readline --enable-long-phy-address --enable-ltdl-install --enable-idle-hack --enable-plugins --enable-a20-pin --enable-x86-64 --enable-smp --enable-cpu-level=6 --enable-large-ramfile --enable-repeat-speedups --enable-fast-function-calls --enable-handlers-chaining --enable-trace-linking --enable-configurable-msrs --enable-show-ips --enable-cpp --enable-debugger-gui --enable-iodebug --enable-logging --enable-assert-checks --enable-fpu --enable-vmx=2 --enable-svm --enable-3dnow --enable-alignment-check --enable-monitor-mwait --enable-avx --enable-evex --enable-x86-debugger --enable-pci --enable-usb --enable-voodoo
3.cp misc/bximage.cpp misc/bximage.cc
cp iodev/hdimage/hdimage.cpp iodev/hdimage/hdimage.cc
cp iodev/hdimage/vmware3.cpp iodev/hdimage/vmware3.cc
cp iodev/hdimage/vmware4.cpp iodev/hdimage/vmware4.cc
cp iodev/hdimage/vpc-img.cpp iodev/hdimage/vpc-img.cc
cp iodev/hdimage/vbox.cpp iodev/hdimage/vbox.cc
4.make clean
make
make install
四、配置bochs运行环境
1.（文件名前有 . 为隐藏文件，要用ls -al才能看见）备份.bochsrc配置文件cp .bochsrc .bochsrc.backup
2.修改.bochsrc，删除文件里原有内容，复制粘贴以下内容
# configuration file generated by Bochs
plugin_ctrl:unmapped=1,biosdev=1，speaker=1,extfpuirq=1,parallel=1,serial=1,iodebug=1
config_interface:textconfig
display_library:x
#memory:host=2048,guest=2048
romimage:file="/usr/local/share/bochs/BIOS-bochs-latest"
vgaromimage:file="/usr/local/share/bochs/VGABIOS-lgpl-latest"
boot:floppy
floppy_bootsig_check:disable=0
floppya:type=1_44,1_44="boot.img",status=inserted,write_protected=0
#no floppyb
ata0:enabled=1,ioaddr1=0x1f0,ioaddr2=0x3f0,irq=14
ata0-master:type=none
ata0-slave:type=none
ata1:enabled=1,ioaddr1=0x170,ioaddr2=0x370,irq=15
ata1-master:type=none
ata1-slave:type=none
ata2:enabled=0
ata3:enabled=0
pci:enabled=1,chipset=i440fx
vga:extension=vbe,update_freq=5

cpu:count=1:1:1,ips=4000000,quantum=16,model=corei7_haswell_4770,reset_on_triple_fault=1,cpuid_limit_winnt=0,ignore_bad_msrs=1,mwait_is_nop=0,msrs="msrs.def"

cpuid:x86_64=1,level=6,mmx=1,sep=1,simd=avx512,aes=1,movbe=1,xsave=1,apic=x2apic,sha=1,adx=1,xsaveopt=1,avx_f16c=1,avx_fma=1,bmi=bmi2,1g_pages=1,pcid=1,fsgsbase=1,smep=1,smap=1,mwait=1,vmx=1
cpuid:family=6,model=0x1a,stepping=5,vendor_string="GenuineIntel",
brand_string="Intel(R) Core(TM) i7-4770 CPU (Haswell)"

print_timestamps:enabled=0
debugger_log:-
magic_break:enabled=0
port_e9_hack:enabled=0
private_colormap:enabled=0
clock:sync=none,time0=local,rtc_sync=0
#no cmosimage
#no loader
log:-
logprefix:%t%e%d
debug:action=ignore
info:action=report
error:action=report
panic:action=ask
keyboard:type=mf,serial_delay=250,paste_delay=100000,user_shortcut=none
mouse:type=ps2,enabled=0,toggle=ctrl+mbutton
speaker:enabled=1,mode=system
parport1:enabled=1,file=none
parport2:enabled=0
com1:enabled=1,mode=null
com2:enabled=0
com3:enabled=0
com4:enabled=0

megs:2048
五、下载并安装NASM
1.cd /home/george/下载
wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/nasm-2.16.03.tar.gz
tar -zxvf nasm-2.16.03.tar.gz -C /usr/local/
2.cd /usr/local/nasm-2.16.03 
./configure
make clean
make
make install
3.为NASM新建桌面快捷方式：在/home/george/桌面新建nasm.desktop文件，复制粘贴以下内容
[Desktop Entry]
Name=NASM
Comment=NASM-2.16.03
Exec=/usr/local/nasm-2.16.03/nasm
Icon=/usr/local/nasm-2.16.03/nsis/nasm.ico
Terminal=true
Type=Application
Categories=Application
Name[zh_CN]=nasm
六、下载并安装Visual Studio Code v1.81版，并设置系统字体和VSCode字体
1.前往https://code.visualstudio.com/updates/v1_81下载.rpm包
2.进入存放.rpm包的目录，使用yum install xxx.rpm安装
3.U盘拷贝Windows系统的所有字体（位于C:\Windows\Fonts中），并复制到CentOS7的/usr/share/fonts/myfonts目录
4.VSCode中的setting.json粘贴以下配置
{
    "editor.fontSize": 23,
    "editor.letterSpacing": 0,
    "scm.inputFontSize": 19,
    "editor.fontFamily": "Consolas, '微软雅黑', monospace",
    "terminal.integrated.fontFamily": "Consolas",
    "terminal.integrated.cursorStyle": "line",
    "terminal.integrated.fontSize": 19,
    "debug.console.fontSize": 19
}
七、建立boot.img并存放boot.bin；loader.bin；kernel.bin......
dd if=boot.bin of=boot.img bs=512 count=2880
sudo mount -t vfat -o loop boot.img /media/
sudo cp loader.bin /media/
sudo cp kernel.bin /media/
sudo sync
sudo umount /media/
bochs -f ./.bochsrc
八、一些调试技巧（包括常用bochs的debug命令；system内核可执行文件的调试；boot.bin和loader.bin的调试）
1.b 0x7C00：在地址0x7C00处打断点
2.c (0x7C00)：一直执行直到遇到死循环或执行完毕当前程序（或者执行到地址为0x7C00的代码语句处）
3.s (100)：单步执行（或向后执行100步）
4.sreg：查看各个段寄存器
5.creg：查看CR0~8、EFER、XCR0等寄存器
6.info reg：查看标志寄存器
7.x /40bx 0x7C00：查看线性地址0x7C00处内存的内容（40：40个内存单元，b：以字节为单位，x：十六进制显示）
8.xp /40bx 0x7C00：查看物理地址0x7C00处内存的内容（40：40个内存单元，b：以字节为单位，x：十六进制显示）
9.调试boot.bin和loader.bin，一般是通过在代码中插入死循环语句jmp $
10.调试system内核，用objdump -D system得到各个函数的入口地址；例如Start_Kernel：0x000000104771；color_printk：0x000000105AEC
   在调用函数的call指令处打断点，在函数出口的ret指令处打断点，之后执行<bochs: > c命令，在此期间通过各种命令查看寄存器和内存
九、Git和GitHub的一些使用技巧
1.安装git通常使用yum install命令或者直接下载rpm包
2.首次配置Git
# 配置全局用户名 (替换 "Your Name" 为你的名字)
git config --global user.name "Your Name"
# 配置全局邮箱地址 (替换 "your_email@example.com" 为你的邮箱)
git config --global user.email "your_email@example.com"
# （可选）检查配置信息
git config --list
3.基本Git操作
(1)初始化仓库
# 进入你的项目目录
cd /path/to/your/project
# 初始化 Git 仓库 (会在目录下创建一个隐藏的 .git 文件夹)
git init
(2)添加文件
# 添加指定文件
git add filename.txt
git add another_file.py
# 添加当前目录下所有更改（新增、修改、删除）的文件
git add .
(3)提交更改
# 提交并添加描述信息
git commit -m "你的提交信息，例如：添加了用户登录功能"
(4)查看状态和历史
# 查看工作区和暂存区的状态（哪些文件被修改、暂存等）
git status
# 查看提交历史
git log
# 查看简洁的提交历史（一行显示）
git log --oneline
# 查看带分支图形的提交历史
git log --graph --oneline --all
4.分支管理
(1)创建和切换分支
# 查看所有本地分支（当前分支前有 * 号）
git branch
# 创建一个新分支（例如叫 feature-x）
git branch feature-x
# 切换到新创建的分支
git checkout feature-x
# 创建并立即切换到新分支（常用）
git checkout -b bugfix-y
(2)合并分支
# 1. 首先切换回你想要合并入的目标分支（例如 main）
git checkout main
# 2. 确保目标分支是最新的（如果是远程协作，先 git pull）
# git pull origin main  (后面会讲到远程操作)
# 3. 合并 feature-x 分支到当前分支 (main)
git merge feature-x
(3)删除分支
# 删除已合并的分支
git branch -d feature-x
# 强制删除未合并的分支（谨慎使用！）
git branch -D feature-x
5.连接到远程GitHub仓库
(1)克隆现有仓库（克隆操作会自动将远程仓库设置为origin）
# 1. 在 GitHub 项目页面找到仓库 URL（HTTPS 或 SSH 格式）
#    HTTPS: https://github.com/username/repository-name.git
#    SSH:   git@github.com:username/repository-name.git (推荐使用 SSH，见第 6 节)
# 2. 使用 git clone 命令
#    使用 HTTPS URL:
git clone https://github.com/username/repository-name.git
#    或者使用 SSH URL (需要先配置 SSH 密钥):
#    git clone git@github.com:username/repository-name.git
# 3. 这会在当前目录下创建一个与仓库同名的文件夹，并包含所有项目文件和历史
cd repository-name
(2)将本地仓库关联到GitHub仓库
# 1. 在 GitHub 上创建一个新的空仓库（不要勾选初始化 README、.gitignore 或 License）。
#    创建后，GitHub 会显示仓库的 URL。
# 2. 进入你的本地项目目录
cd /path/to/your/project
# 3. 添加远程仓库地址，并命名为 origin (这是标准惯例)
#    使用 HTTPS URL:
git remote add origin https://github.com/username/repository-name.git
#    或者使用 SSH URL:
#    git remote add origin git@github.com:username/repository-name.git
# 4. （可选）验证远程仓库是否添加成功
git remote -v
(3)推送更改到Github
# 首次推送本地分支（例如 main）到 origin，并设置上游跟踪 (-u)
git push -u origin main
# 之后，如果本地 main 分支有新的提交，可以直接推送
git push
# 如果要推送其他分支，例如 develop
git push origin develop
(4)拉取GitHub上的更改
# 拉取当前分支对应的远程分支（例如 main）的更新
git pull origin main
# 如果上游已设置，通常可以直接用
git pull
# git pull 实际上是 git fetch（获取远程更新但不合并）和 git merge（合并）的组合
6.使用SSH密钥连接GitHub（推荐）
(1)查看是否存在id_rsa.pub,id_ed25519.pub或id_ecdsa.pub等文件。如果存在，可以跳过生成步骤（除非你想用新的）
ls -al ~/.ssh
(2)生成新的ssh密钥
# 替换为你的 GitHub 邮箱
ssh-keygen -t ed25519 -C "your_email@example.com"
# 或者使用 RSA (如果系统不支持 Ed25519)
# ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
(3)将ssh公钥添加到GitHub
# 显示并复制公钥内容 (注意是 .pub 文件)
cat ~/.ssh/id_ed25519.pub
# 复制输出的全部内容（以 ssh-ed25519 或 ssh-rsa 开头，以你的邮箱结尾）。
登录 GitHub -> 点击右上角头像 -> Settings -> 左侧菜单 SSH and GPG keys -> 点击 "New SSH key" 或 "Add SSH key" -> 粘贴你的公钥，
给它起个标题（例如 "My CentOS 7 VM"），然后点击 "Add SSH key"。
(4)测试ssh连接
ssh -T git@github.com；首次连接会询问是否信任 GitHub 的主机密钥，输入 yes。如果看到 "Hi username! You've successfully authenticated..." 的消息，说明配置成功
(5)使用ssh url进行Git操作
# 查看当前的 remote
git remote -v
# 移除旧的 origin (如果是 HTTPS)
# git remote remove origin
# 添加新的 SSH origin
# git remote add origin git@github.com:username/repository-name.git
# 或者直接修改现有 origin 的 URL
git remote set-url origin git@github.com:username/repository-name.git
7..gitignore 文件：在项目根目录下创建一个名为 .gitignore 的文件，列出你不希望 Git 跟踪的文件或目录模式（例如编译产生的文件、日志文件、依赖库文件夹 node_modules 等）
例如：# 忽略日志文件
*.log
logs/

# 忽略编译产生的文件
*.o
*.class
build/

# 忽略特定配置文件（可能包含敏感信息）
config.local.yaml

# 忽略操作系统生成的文件
.DS_Store
Thumbs.db

# 忽略依赖管理文件夹
node_modules/
vendor/
8.忽略已经被Git追踪的文件：.gitignore文件只对尚未被Git追踪的文件生效。如果一个文件已经被Git追踪（即你之前已经git add并git commit了它），
即使把它添加到.gitignore中，Git仍然会继续追踪它。要停止追踪一个已经被追踪的文件并将其忽略，你需要先从Git索引中移除它，然后再提交：
git rm --cached <文件名>
git commit -m "Stop tracking <文件名>"